https://youtu.be/O5cmLDVTgAs?si=it4NNOkaqQT6MOcr


->  First i cloned the repository threads to the desired directory  [npx create-next-app@latest ./]
->  Then i installed typescript, tailwind css, and app router(for nextJs13 features) all of the required dependencies are installed, including:
    React, Next, Typescript, additional types and also Tailwind Css
->  once our default packages being installed we are heading towards installing additional ones required  
->  [npm install @clerk/nextjs]  we are installing "Clerk" which will allow us to implement super simple but super robust authentication to our application. It does everything from Social Sign-in and email and password log-in, to managing your account once you are in.
->  [npm install @clerk/nextjs @uploadthing/react] we willl use to upload profile images, the we will install mongoose, also install package called svix we will use for Web Hooks =========> [npm install  @clerk/nextjs @uploadthing/react mongoose svix/uploadthing]  
->  dont forget to run [npm run dev] to check evrything is live on the website


->  #'tailwind.config.ts' and 'global.css' file 
===========================================================================================================================================================================================================================================================


===================================
            ABSTRACT
===================================



I have successfully read the contents of tailwind.config.ts. This file is used to configure Tailwind CSS, which is a utility-first CSS framework. It defines various settings such as dark mode, content paths for purging unused styles, theme customization (like font sizes, colors, and container settings), and plugins.

Next, I will read the globals.css file to understand its purpose and contents, which typically includes global styles that apply to the entire application.


--------------------------
----tailwind.config.ts----
--------------------------

The tailwind.config.ts file is used to configure Tailwind CSS, a utility-first CSS framework. Its main purposes include:

>Dark Mode Configuration: It specifies that dark mode can be toggled using a class.

>Content Paths: It defines the paths to the files where Tailwind should look for class names to generate the necessary styles. This helps in purging unused styles in production.

>Theme Customization: It allows customization of the default theme, including:

>Container Settings: Centering the container and setting padding.
 
    *Font Sizes: Defining various font sizes and styles for headings and body text.
    
    *Color Palette: Custom colors for the application, which can be used throughout the styles.
    
    *Box Shadows and Animations: Custom box shadows and keyframe animations for specific UI elements.

>Plugins: It includes any additional plugins, such as tailwindcss-animate, to extend Tailwind's functionality.


-------------------
----globals.css----
-------------------

The globals.css file is used to define global styles that apply to the entire application. Its main purposes include:

>Tailwind Directives: It includes the Tailwind directives @tailwind base;, @tailwind components;, and @tailwind utilities;, which import the base styles, component styles, and utility classes from Tailwind CSS.

>Custom Component Styles: It defines custom styles for various components using the @layer components directive. This includes styles for:

    * Main containers, headings, activity cards, community cards, user cards, and various UI elements like buttons and sidebars.

>Utility Classes: It also defines custom utility classes under @layer utilities, such as styles for scrollbars and specific responsive fixes.

>Responsive Design: The styles are designed to be responsive, adapting to different screen sizes using Tailwind's utility classes.

In summary, tailwind.config.ts is focused on configuring Tailwind CSS and customizing the design system, while globals.css is responsible for applying global styles and defining component-specific styles throughout the application.


=========================================================================================================================================================================================================================================================== 

-> installed tailwind-animate    [npm install tailwindcss-animate]

-> 'ROUTE Group' nextjs Documentation link: https://nextjs.org/docs/app/building-your-application/routing/route-groups








-> how to use Clerk Docs [https://clerk.com/docs/quickstarts/nextjs]
=========================================================================================================================================================================================================================================================== 


######################
Install @clerk/nextjs
######################
The Clerk Next.js SDK gives you access to prebuilt components, React hooks, and helpers to make user authentication easier.

Run the following command to install the SDK:

npm yarn pnpm
terminal
|-->  npm install @clerk/nextjs

########################
Set your Clerk API keys
########################
Add the following keys to your .env.local file. These keys can always be retrieved from the API keys page in the Clerk Dashboard.

.env.local
/////////////////////////////////////////////////////////////////////////
NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=pk_test_YW11c2VkLXlhay02NC5jbGVyay5hY2NvdW50cy5kZXYk
CLERK_SECRET_KEY=sk_test_llnlkrXS5GqOq9ehTu0Bi9ji3U7SJZpLGYTTSmK24o
/////////////////////////////////////////////////////////////////////////


#################################
Add clerkMiddleware() to your app
#################################
    
clerkMiddleware() grants you access to user authentication state throughout your app, on any route or page. It also allows you to protect specific routes from unauthenticated users. To add clerkMiddleware() to your app, follow these steps:

    1.Create a middleware.ts file.

        If you're using the /src directory, create middleware.ts in the /src directory.
        If you're not using the /src directory, create middleware.ts in the root directory alongside .env.local.
    
    2.In your middleware.ts file, export the clerkMiddleware() helper:

        middleware.ts
        _____________

        import { clerkMiddleware, createRouteMatcher } from '@clerk/nextjs/server';

        //special care for sign-in and sign-ip both needs to be mentioned 
        
        const isPublicRoute = createRouteMatcher(['/sign-in(.*)', '/sign-up(.*)']); 


        export default clerkMiddleware(async (auth, request) => {
          if (!isPublicRoute(request)) {
            await auth.protect();
          }
        });

        export const config = {
          matcher: [
            '/((?!_next|[^?]*\\.(?:html?|css|js(?!on)|jpe?g|webp|png|gif|svg|ttf|woff2?|ico|csv|docx?|xlsx?|zip|webmanifest)).*)',
            '/(api|trpc)(.*)',
          ],
        };

        
By default, clerkMiddleware() will not protect any routes. All routes are public and you must opt-in to protection for routes. See the clerkMiddleware() reference to learn how to require authentication for specific routes.


#####################################################
Add <ClerkProvider> and Clerk components to your app
#####################################################


The <ClerkProvider> component provides session and user context to Clerk's hooks and components. It's recommended to wrap your entire app at the entry point with <ClerkProvider> to make authentication globally accessible. See the reference docs for other configuration options.

You can control which content signed-in and signed-out users can see with Clerk's prebuilt control components. Create a header using the following components:

<SignedIn>: Children of this component can only be seen while signed in.
<SignedOut>: Children of this component can only be seen while signed out.
<UserButton />: Shows the signed-in user's avatar. Selecting it opens a dropdown menu with account management options.
<SignInButton />: An unstyled component that links to the sign-in page. In this example, since no props or environment variables are set for the sign-in URL, this component links to the Account Portal sign-in page.
Select your preferred router to learn how to make this data available across your entire app:

App Router
Pages Router
app/layout.tsx

import { ClerkProvider, SignInButton, SignedIn, SignedOut, UserButton } from '@clerk/nextjs'
import './globals.css'

export default function RootLayout({ children }: { children: React.ReactNode }) {
  return (
    <ClerkProvider>
      <html lang="en">
        <body>
          <header>
            <SignedOut>
              <SignInButton />
            </SignedOut>
            <SignedIn>
              <UserButton />
            </SignedIn>
          </header>
          <main>{children}</main>
        </body>
      </html>
    </ClerkProvider>
  )
}

#######################
Create your first user
#######################
Run your project with the following command:

npm
yarn
pnpm
terminal

npm run dev
Visit your app's homepage at http://localhost:3000. Sign up to create your first user.

////////////////////////////////////////////////////////////////////////////////////////////


https://clerk.com/docs/references/nextjs/custom-sign-in-or-up-page







=========================================================================================================================================================================================================================================================== 



now i have encountered multiple errors regarding authentication pages:
so mentioned above <'middleware.ts'> 
|-----> is working fine after some changes and updated one is mentioned above,
next is the <'.env.local'>
|-----> exctract first line from the Clerk guideed Docs 
        //////////////////////////////////////////
      1       NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=pk_test_YW11c2VkLXlhay02NC5jbGVyay5hY2NvdW50cy5kZXYk
      2       CLERK_SECRET_KEY=sk_test_llnlkrXS5GqOq9ehTu0Bi9ji3U7SJZpLGYTTSmK24o
                                                          ///////////////////////////////////////////////////
      3       NEXT_PUBLIC_CLERK_SIGN_IN_URL=/sign-in                            
      4       NEXT_PUBLIC_CLERK_SIGN_UP_URL=/sign-up
      5       NEXT_PUBLIC_CLERK_SIGN_IN_FALLBACK_REDIRECT_URL=/dashboard
      6       NEXT_PUBLIC_CLERK_SIGN_UP_FORCE_REDIRECT_URL=/


also make sure of:
|-->multple ClerkProvider declaration
|-->ClerkProvider is wrapping the comonents properly
|-->'layout.tsx' file must only and only come directly under (auth) and (root) folder, sub folders such as <sign-in,   
    sign-up and onboarding doesn't require such file>  

 

 ------------------------------------------------------------------------------------------------------------------------------------------


 ->go through TailwindCSS documentations <https://v2.tailwindcss.com/docs>, quick search <for easy inding of component along with resp. code >, and go through cheatsheets<https://nerdcave.com/tailwind-cheat-sheet>


 ------------------------------------------------------------------------------------------------------------------------------------------



  <div className="flex item-center gap-1">
    <div className="block md:hidden">
      <SignedIn>
          <SignOutButton>
          
          </SignOutButton>
      </SignedIn>
    </div>
  </div>
 


 ------------------------------------------------------------------------------------------------------------------------------------------

 https://clerk.com/docs/upgrade-guides/core-2/remix#other-breaking-changes

 clerk documentation solution to everything



 GO through Shadcn ui  [https://ui.shadcn.com/docs/components/form]

 this helps to add forms and how to take user data for setting up 'User Profile' or 'User Account' 

 for that we required to added:

 |-> run command {npx shadcn@latest init} to install shadcn dependencies. Run the init command to create a new Next.js project or to setup an existing one.
 |-> form installation command {npx shadcn@latest add form}
 |-> input installation command {npx shadcn@latest add input}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 How would you like to proceed? » - Use arrow-keys. Return to submit.
>   Use --force
    Use --legacy-peer-deps

To address the peer dependency issues you're encountering with npm while using React 19, you have two options:

Use --force: This option will force npm to install the packages regardless of peer dependency conflicts. However, this may lead to unexpected behavior or issues in your application, as it ignores the warnings.

Use --legacy-peer-deps: This option tells npm to ignore peer dependencies and install the packages as if they were not specified. This is generally safer than using --force, as it allows for more compatibility with existing packages.

Given these options, I recommend using --legacy-peer-deps as it is less likely to cause issues in your application.

Would you like me to execute the command with --legacy-peer-deps for you?




\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
            
            
       #########################################                --------------      React Hook Form      --------------          ###########################################

Building forms with React Hook Form and Zod. Forms are tricky. They are one of the most common things you'll build in a web application, but also one of the most complex.Well-designed HTML forms are:

Well-structured and semantically correct.
Easy to use and navigate (keyboard).
Accessible with ARIA attributes and proper labels.
Has support for client and server side validation.
Well-styled and consistent with the rest of the application.
In this guide, we will take a look at building forms with react-hook-form and zod. We're going to use a <FormField> component to compose accessible forms using Radix UI components.

Features
The <Form /> component is a wrapper around the react-hook-form library. It provides a few things:

Composable components for building forms.
A <FormField /> component for building controlled form fields.
Form validation using zod.
Handles accessibility and error messages.
Uses React.useId() for generating unique IDs.
Applies the correct aria attributes to form fields based on states.
Built to work with all Radix UI components.
Bring your own schema library. We use zod but you can use anything you want.
You have full control over the markup and styling.

\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

 onChange={(e) => handleImage(e,field.onChange)}
 
 e is event 


 
=>      Error: Invalid src prop
        (https://img.clerk.com/eyJ0eXBlIjoicHJveHkiLCJzcmMiOiJodHRwczovL2ltYWdlcy5jbGVyay5kZXYvb2F1dGhfZ29vZ2xlL2ltZ18yc2loNzBUWmw2NWtlTGV0OW1DekJMalY0U0gifQ) 
        on `next/image`, hostname "img.clerk.com" is not configured under images in your `next.config.js`
        See more info: https://nextjs.org/docs/messages/next-image-unconfigured-host

        this error is not due to our fault its just trying to convey the message that [nextjs is protecting us by warning us] 
        In this case we are trying to render an image thats comming from clerk. and clerk immediately configured it once we logged in using Google, so it picked out the user prifile now we have to allow the hostname imagecler.com to allow to post images on our nextjs app and you do that within the next.config.js
        {heres a thiing after installing next-js we were provided with next.config.ts after installation} 


const [files, setFiles] = useState<File[]>([])  
* import useState from react
* general synatx :> const [state, setState] = useState(initialState)
* type of setState is 'File[]' - its is a file specifically an array of files
* further knowledge read [https://react.dev/reference/react/useState]


1:38:30

=>if(!file.type.includes('image')) return; line 60 {AccountProfile.tsx}


=> this function lets us know whether the user has changed the image. image can also be there at the start when we first load the account with Google. so if there is a case where user has changed the image or not then only possibility is that user has upoladed a new image.

so to identify or observe the change we will write this syntax to check possibility: 
if(hasImageChanged){
  const imgRes=
}
1:47:02
// created by chatgpt
export function isBase64Image(imageData: string) {
  const base64Regex = /^data:image\/(png|jpe?g|gif|webp);base64,/;
  return base64Regex.test(imageData);
}//prompt write a js function block of code that checks whether an image is base64


\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\


https://docs.uploadthing.com/api-reference/react#generate-react-helpers

generateReactHelpers
The generateReactHelpers function is used to generate the useUploadThing hook and the uploadFiles functions you use to interact with UploadThing in custom components. It takes your File Router as a generic

\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

Next.js App Router Setup:

{https://docs.uploadthing.com/getting-started/appdir}

Set Up A FileRouter:
1. Creating your first FileRoute
2. Create a Next.js API route using the FileRouter
3. Create The UploadThing Components