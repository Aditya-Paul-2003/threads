https://youtu.be/O5cmLDVTgAs?si=it4NNOkaqQT6MOcr


->  First i cloned the repository threads to the desired directory  [npx create-next-app@latest ./]
->  Then i installed typescript, tailwind css, and app router(for nextJs13 features) all of the required dependencies are installed, including:
    React, Next, Typescript, additional types and also Tailwind Css
->  once our default packages being installed we are heading towards installing additional ones required  
->  [npm install @clerk/nextjs]  we are installing "Clerk" which will allow us to implement super simple but super robust authentication to our application. It does everything from Social Sign-in and email and password log-in, to managing your account once you are in.
->  [npm install @clerk/nextjs @uploadthing/react] we willl use to upload profile images, the we will install mongoose, also install package called svix we will use for Web Hooks =========> [npm install  @clerk/nextjs @uploadthing/react mongoose svix/uploadthing]  
->  dont forget to run [npm run dev] to check evrything is live on the website


->  #'tailwind.confi.ts' and 'global.css' file 
===========================================================================================================================================================================================================================================================


===================================
            ABSTRACT
===================================



I have successfully read the contents of tailwind.config.ts. This file is used to configure Tailwind CSS, which is a utility-first CSS framework. It defines various settings such as dark mode, content paths for purging unused styles, theme customization (like font sizes, colors, and container settings), and plugins.

Next, I will read the globals.css file to understand its purpose and contents, which typically includes global styles that apply to the entire application.


--------------------------
----tailwind.config.ts----
--------------------------

The tailwind.config.ts file is used to configure Tailwind CSS, a utility-first CSS framework. Its main purposes include:

>Dark Mode Configuration: It specifies that dark mode can be toggled using a class.

>Content Paths: It defines the paths to the files where Tailwind should look for class names to generate the necessary styles. This helps in purging unused styles in production.

>Theme Customization: It allows customization of the default theme, including:

>Container Settings: Centering the container and setting padding.
 
    *Font Sizes: Defining various font sizes and styles for headings and body text.
    
    *Color Palette: Custom colors for the application, which can be used throughout the styles.
    
    *Box Shadows and Animations: Custom box shadows and keyframe animations for specific UI elements.

>Plugins: It includes any additional plugins, such as tailwindcss-animate, to extend Tailwind's functionality.


-------------------
----globals.css----
-------------------

The globals.css file is used to define global styles that apply to the entire application. Its main purposes include:

>Tailwind Directives: It includes the Tailwind directives @tailwind base;, @tailwind components;, and @tailwind utilities;, which import the base styles, component styles, and utility classes from Tailwind CSS.

>Custom Component Styles: It defines custom styles for various components using the @layer components directive. This includes styles for:

    * Main containers, headings, activity cards, community cards, user cards, and various UI elements like buttons and sidebars.

>Utility Classes: It also defines custom utility classes under @layer utilities, such as styles for scrollbars and specific responsive fixes.

>Responsive Design: The styles are designed to be responsive, adapting to different screen sizes using Tailwind's utility classes.

In summary, tailwind.config.ts is focused on configuring Tailwind CSS and customizing the design system, while globals.css is responsible for applying global styles and defining component-specific styles throughout the application.


=========================================================================================================================================================================================================================================================== 

-> installed tailwind-animate    [npm install tailwindcss-animate]

-> 'ROUTE Group' nextjs Documentation link: https://nextjs.org/docs/app/building-your-application/routing/route-groups








-> how to use Clerk Docs [https://clerk.com/docs/quickstarts/nextjs]
=========================================================================================================================================================================================================================================================== 


######################
Install @clerk/nextjs
######################
The Clerk Next.js SDK gives you access to prebuilt components, React hooks, and helpers to make user authentication easier.

Run the following command to install the SDK:

npm yarn pnpm
terminal
|-->  npm install @clerk/nextjs

########################
Set your Clerk API keys
########################
Add the following keys to your .env.local file. These keys can always be retrieved from the API keys page in the Clerk Dashboard.

.env.local
/////////////////////////////////////////////////////////////////////////
NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=pk_test_YW11c2VkLXlhay02NC5jbGVyay5hY2NvdW50cy5kZXYk
CLERK_SECRET_KEY=sk_test_llnlkrXS5GqOq9ehTu0Bi9ji3U7SJZpLGYTTSmK24o
/////////////////////////////////////////////////////////////////////////


#################################
Add clerkMiddleware() to your app
#################################
    
clerkMiddleware() grants you access to user authentication state throughout your app, on any route or page. It also allows you to protect specific routes from unauthenticated users. To add clerkMiddleware() to your app, follow these steps:

    1.Create a middleware.ts file.

        If you're using the /src directory, create middleware.ts in the /src directory.
        If you're not using the /src directory, create middleware.ts in the root directory alongside .env.local.
    
    2.In your middleware.ts file, export the clerkMiddleware() helper:

        middleware.ts
        _____________

        import { clerkMiddleware } from '@clerk/nextjs/server'

        export default clerkMiddleware()

        export const config = {
        matcher: [
            
            // Skip Next.js internals and all static files, unless found in search params
            '/((?!_next|[^?]*\\.(?:html?|css|js(?!on)|jpe?g|webp|png|gif|svg|ttf|woff2?|ico|csv|docx?|xlsx?|zip|webmanifest)).*)',
            
            // Always run for API routes
            '/(api|trpc)(.*)',
        ],
        }

        
By default, clerkMiddleware() will not protect any routes. All routes are public and you must opt-in to protection for routes. See the clerkMiddleware() reference to learn how to require authentication for specific routes.


#####################################################
Add <ClerkProvider> and Clerk components to your app
#####################################################


The <ClerkProvider> component provides session and user context to Clerk's hooks and components. It's recommended to wrap your entire app at the entry point with <ClerkProvider> to make authentication globally accessible. See the reference docs for other configuration options.

You can control which content signed-in and signed-out users can see with Clerk's prebuilt control components. Create a header using the following components:

<SignedIn>: Children of this component can only be seen while signed in.
<SignedOut>: Children of this component can only be seen while signed out.
<UserButton />: Shows the signed-in user's avatar. Selecting it opens a dropdown menu with account management options.
<SignInButton />: An unstyled component that links to the sign-in page. In this example, since no props or environment variables are set for the sign-in URL, this component links to the Account Portal sign-in page.
Select your preferred router to learn how to make this data available across your entire app:

App Router
Pages Router
app/layout.tsx

import { ClerkProvider, SignInButton, SignedIn, SignedOut, UserButton } from '@clerk/nextjs'
import './globals.css'

export default function RootLayout({ children }: { children: React.ReactNode }) {
  return (
    <ClerkProvider>
      <html lang="en">
        <body>
          <header>
            <SignedOut>
              <SignInButton />
            </SignedOut>
            <SignedIn>
              <UserButton />
            </SignedIn>
          </header>
          <main>{children}</main>
        </body>
      </html>
    </ClerkProvider>
  )
}

#######################
Create your first user
#######################
Run your project with the following command:

npm
yarn
pnpm
terminal

npm run dev
Visit your app's homepage at http://localhost:3000. Sign up to create your first user.
=========================================================================================================================================================================================================================================================== 
